@page "/chats"

<PageTitle>Chats</PageTitle>

@using ChatApplication.Blazor.Models.Chat
@using ChatApplication.Blazor.Services.Interfaces
@using ChatApplication.Shared.Models
@using Microsoft.AspNetCore.WebUtilities

@inject IChatService ChatService;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;

<MudPaper Elevation="3">
    <MudTable
        Items="@_chatModels"
        Dense="@dense"
        Hover="@hover"
        @bind-SelectedItem="_chatModel"
        SortLabel="Sort By"
        CommitEditTooltip="Commit Edit"
        OnCommitEditClick="@(() => Snackbar.Add("Commit Handle"))"
    >
        <ToolBarContent>
            <MudText Typo="Typo.h6">
                Chat Models List
            </MudText>
            <MudSpacer />
            <MudTextField
                Placeholder="Search"
                Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Custom.Uncategorized.Baguette"
                IconSize="Size.Medium"
                Class="mt-0"
                Value="_searchString"
                ValueChanged="@( async (string searchString) => { await HandleSearchInput(searchString);})"
            >
            </MudTextField>
        </ToolBarContent>
        
        <ColGroup>
            <col style="width: 50px"/>
            <col style="width: 80px"/>
            <col style="width: 50%"/>
            <col/>
            <col/>
            <col style="width: 50px"/>
        </ColGroup>
        
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ChatModel, object>(c => c.Id)">
                    Id
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ChatModel, object>(c => c.Name)">
                    Name
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ChatModel, object>(c => c.ChatTypeId)">
                    Chat Type Id
                </MudTableSortLabel>
            </MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd>
                @context.Id
            </MudTd>
            <MudTd>
                @context.Name
            </MudTd>
            <MudTd>
                @context.ChatTypeId
            </MudTd>
        </RowTemplate>
        
        <RowEditingTemplate>
            <MudTd>
                @context.Id
            </MudTd>
            <MudTd>
                @context.Name
            </MudTd>
            <MudTd>
                @context.ChatTypeId
            </MudTd>
        </RowEditingTemplate>
        
        <PagerContent>
            <MudTablePager></MudTablePager>
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    private IEnumerable<ChatModel> _chatModels;
    private bool dense = false;
    private bool hover = true;
    private string _searchString = string.Empty;
    private ChatModel _chatModel = new();
    private ChatFilterModel _filterModel = new();

    /*private async Task<IEnumerable<ChatModel>> GetChatsAsync()
    {
        _filterModel.SearchString = _searchString;
        return await ChatService.GetChatsByFilterAsync(_filterModel);
    }*/

    /*private bool FilterFunc(ChatModel chatModel)
    {
        return string.IsNullOrWhiteSpace(_searchString) 
               || chatModel.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }*/

    private async Task HandleSearchInput(string searchInput)
    {
        _searchString = searchInput;
        _filterModel.SearchString = _searchString;
        Navigate();
        _chatModels = await ChatService.GetChatsByFilterAsync(_filterModel);
    }
    
    private void Navigate()
    {
        var queryParams = new Dictionary<string, string>
        {
            ["page"] = !string.IsNullOrWhiteSpace(_filterModel.Page.ToString()) ? _filterModel.Page.ToString() : null,
            ["count"] = !string.IsNullOrWhiteSpace(_filterModel.Count.ToString()) ? _filterModel.Count.ToString() : null,
            ["searchString"] = !string.IsNullOrWhiteSpace(_filterModel.SearchString) ? _filterModel.SearchString : null
        };
        
        NavigationManager.NavigateTo(QueryHelpers.AddQueryString("chats", queryParams));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _filterModel.SearchString = _searchString;
            _chatModels = await ChatService.GetChatsByFilterAsync(_filterModel);

            StateHasChanged();
        }
    }

    protected override Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("searchString", out var searchString))
        {
            _searchString = searchString;
        }
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var page))
        {
            _filterModel.Page = int.Parse(page);
        }
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("count", out var count))
        {
            _filterModel.Count = int.Parse(count);
        }
        
        
        return base.OnInitializedAsync();
    }
}