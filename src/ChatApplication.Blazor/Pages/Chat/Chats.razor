@page "/chats"

<PageTitle>Chats</PageTitle>

@using ChatApplication.Blazor.Models.Chat
@using ChatApplication.Blazor.Pages.Chat.Dialogs
@using ChatApplication.Blazor.Services
@using ChatApplication.Blazor.Services.Interfaces
@using ChatApplication.Shared.Models
@using Microsoft.AspNetCore.WebUtilities
@using System.IdentityModel.Tokens.Jwt

@inject IChatService ChatService;
@inject NavigationManager NavigationManager;
@inject IDialogService DialogService
@inject ChatAuthenticationStateProvider AuthenticationState;

<MudButton 
    OnClick="OnAddNewChat" 
    Variant="Variant.Filled" 
    Color="Color.Primary"
>
    +
</MudButton>
<MudPaper Elevation="3">
    <MudTable
        @ref="_table"
        T="ChatModel"
        CurrentPage="0"
        ServerData="@(new Func<TableState, Task<TableData<ChatModel>>>(GetServerData))"
        SortLabel="Sort By"
        OnRowClick="@(chat => OnRowClicked(chat.Item))"
    >
        <ToolBarContent>
            <MudText Typo="Typo.h6">
                Chats
            </MudText>
            <MudSpacer />
            <MudTextField
                Placeholder="Search"
                Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Custom.Uncategorized.Baguette"
                IconSize="Size.Medium"
                Class="mt-0"
                Value="@_filterModel.SearchString"
                ValueChanged="@( async (string searchString) => { await HandleSearchInput(searchString);})"
            >
            </MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ChatModel, object>(c => c.Id)">
                    Id
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ChatModel, object>(c => c.Name)">
                    Name
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ChatModel, object>(c => c.ChatTypeId)">
                    Chat Type Id
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ChatModel, object>(c => c.MembersCount)">
                    Members Count
                </MudTableSortLabel>
            </MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd>
                @context.Id
            </MudTd>
            <MudTd>
                @context.Name
            </MudTd>
            <MudTd>
                @context.ChatTypeId
            </MudTd>
            <MudTd>
                @context.MembersCount
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager PageSizeOptions="@(new []{1, 2, 3})"></MudTablePager>
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    private readonly ChatFilterModel _filterModel = new();
    private MudTable<ChatModel> _table;
    private string _userId;
    
    private async Task<TableData<ChatModel>> GetServerData(TableState state)
    {
        _filterModel.Page = state.Page + 1;
        _filterModel.Count = state.PageSize;

        Navigate();

        if (string.IsNullOrWhiteSpace(_userId))
        {
            var authState = await AuthenticationState.GetAuthenticationStateAsync();
            _userId = authState.User.Claims.FirstOrDefault(c => c.Type == JwtRegisteredClaimNames.Sub)?.Value;
        }
        
        var response = await ChatService.GetChatsByUserIdAsync(_userId, _filterModel);

        return new TableData<ChatModel>
        {
            Items = response.Data,
            TotalItems = response.TotalCount
        };
    }

    private void OnRowClicked(ChatModel chat)
    {
        NavigationManager.NavigateTo($"chats/{chat.Id}");
    }

    private async Task HandleSearchInput(string searchInput)
    {
        _filterModel.SearchString = searchInput;
        await _table.ReloadServerData();
    }
    
    private void Navigate()
    {
        var queryParams = new Dictionary<string, string>
        {
            ["page"] = !string.IsNullOrWhiteSpace(_filterModel.Page.ToString()) ? _filterModel.Page.ToString() : null,
            ["count"] = !string.IsNullOrWhiteSpace(_filterModel.Count.ToString()) ? _filterModel.Count.ToString() : null,
            ["searchString"] = !string.IsNullOrWhiteSpace(_filterModel.SearchString) ? _filterModel.SearchString : null
        };
        
        NavigationManager.NavigateTo(QueryHelpers.AddQueryString("chats", queryParams));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            FetchParamsFromUrl();
            StateHasChanged();
        }
    }

    private void FetchParamsFromUrl()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("searchString", out var searchString))
        {
            _filterModel.SearchString = searchString;
        }
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var page))
        {
            _filterModel.Page = int.Parse(page);
            _table.CurrentPage = int.Parse(page) - 1;
        }
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("count", out var count))
        {
            _filterModel.Count = int.Parse(count);
            _table.RowsPerPage = int.Parse(count);
        }
    }
    
    private void OnAddNewChat(MouseEventArgs obj)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true};
        DialogService.Show<AddNewChatDialog>("Add New Chat", options);
    }
}