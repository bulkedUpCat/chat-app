@page "/chats/{id:int}/call"
@using Microsoft.AspNetCore.SignalR.Client

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

@if (_callStarted)
{
    <div id="videoArea"></div>
    <button @onclick="LeaveTheCallAsync">Leave the call</button>
}
else
{
    <button @onclick="JoinTheCallAsync">Join the call</button>
}

 <style>
    #videoArea {
      display: grid;
      grid-template-columns: repeat(auto-fill, 300px);
      grid-auto-rows: 300px;
      gap: 20px;
    }
    
    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }
    
    [CascadingParameter(Name = "VideoHubConnection")]
    public HubConnection VideoHubConnection { get; set; }

    private IJSObjectReference Peer { get; set; }

    private bool _callStarted;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            NavigationManager.LocationChanged += OnLocationChanged;

            if (VideoHubConnection == null)
            {
                var jwtToken = await JsRuntime.InvokeAsync<string>("getJwtToken");
                
                VideoHubConnection = new HubConnectionBuilder()
                    .WithUrl($"{Configuration.GetSection("APIUrl").Value}videoHub?access_token={jwtToken}")
                    .Build();

                await VideoHubConnection.StartAsync();
                
                VideoHubConnection.On<string, string>("UserConnected", async (userId, connectionId) =>
                {
                    var stream = await JsRuntime.InvokeAsync<IJSObjectReference>("getLocalStream");
                    await JsRuntime.InvokeVoidAsync("connectToNewUser", userId, Peer, stream);
                });
            }
        }
    }
    
    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        JsRuntime.InvokeVoidAsync("stop", Peer);
    }

    private async Task JoinTheCallAsync()
    {
        _callStarted = true;

        Peer = await JsRuntime.InvokeAsync<IJSObjectReference>("initialize", Id, DotNetObjectReference.Create(this));
        await JsRuntime.InvokeVoidAsync("start", Peer);
    }

    private async Task LeaveTheCallAsync()
    {
        await JsRuntime.InvokeVoidAsync("stop", Peer);

        var uri = NavigationManager.Uri[..NavigationManager.Uri.LastIndexOf('/')];
        NavigationManager.NavigateTo(uri);
    }

    [JSInvokable]
    public async Task JoinVideoCallAsync(string peerId)
    {
        await VideoHubConnection.SendAsync("JoinVideoCallAsync", peerId, Id);
    }
}