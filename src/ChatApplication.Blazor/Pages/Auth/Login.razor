@page "/login"
@using ChatApplication.Blazor.Models.Auth
@using ChatApplication.Blazor.Services.Interfaces

@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar SnackBar

<EditForm Model="_loginModel" OnValidSubmit="SubmitForm">
    <FluentValidationValidator />

    <h2 class="container__heading">Log in</h2>

    <div class="form-group container__item">
        <label for="email">Email</label>
        <input type="text" Class="form-control" id="email" @bind="_loginModel.Email"/>
        <ValidationMessage For="@(() => _loginModel.Email)"/>
    </div>
    <div class="form-group container__item">
        <label for="password">Password</label>
        <input type="password" Class="form-control" id="password" @bind="_loginModel.Password"/>
        <ValidationMessage For="@(() => _loginModel.Password)"/>
    </div>
    <button type="submit" class="btn btn-primary container__btn">Log in</button>
</EditForm>

@code {
    private readonly LoginModel _loginModel = new();

    private async Task SubmitForm()
    {
        var response = await AuthService.LoginAsync(_loginModel);
    
        if (response.Succeeded)
        {
            NavigationManager.NavigateTo("/", true);
        }
        else
        {
            SnackBar.Add("Invalid email or password", Severity.Error);
        }
    }
}