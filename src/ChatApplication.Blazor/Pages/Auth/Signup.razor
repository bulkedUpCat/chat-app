@page "/signup"

@using ChatApplication.Blazor.Models.Auth
@using ChatApplication.Blazor.Services.Interfaces

@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar;

<EditForm Model="_signupModel" class="container" OnValidSubmit="SubmitForm">
    <FluentValidationValidator />
    
    <h2 class="container__heading">Sign up</h2>

    <div class="form-group container__item">
        <label for="email">Email</label>
        <input type="text" class="form-control" id="email" @bind="_signupModel.Email"/>
        <ValidationMessage For="@(() => _signupModel.Email)"/>
    </div>
    <div class="form-group container__item">
        <label for="firstName">First Name</label>
        <input type="text" class="form-control" id="firstName" @bind="_signupModel.FirstName"/>
        <ValidationMessage For="@(() => _signupModel.FirstName)"/>
    </div>
    <div class="form-group container__item">
        <label for="lastName">Last Name</label>
        <input type="text" class="form-control" id="lastName" @bind="_signupModel.LastName"/>
        <ValidationMessage For="@(() => _signupModel.LastName)"/>
    </div>
    <div class="form-group container__item">
        <label for="password">Password</label>
        <input type="password" class="form-control" id="password" @bind="_signupModel.Password"/>
        <ValidationMessage For="@(() => _signupModel.Password)"/>
    </div>
    <div class="form-group container__item">
        <label for="password">Confirm password</label>
        <input type="password" class="form-control" id="confirmedPassword" @bind="_signupModel.ConfirmedPassword"/>
        <ValidationMessage For="@(() => _signupModel.ConfirmedPassword)"/>
    </div>
    <button type="submit" class="btn btn-primary container__btn">Sign up</button>
</EditForm>

@code {
    private readonly SignupModel _signupModel = new();

    private async Task SubmitForm()
    {
        if (_signupModel.Password != _signupModel.ConfirmedPassword)
        {
            Snackbar.Add("Passwords don't match", Severity.Error);
            return;
        }
        
        var response = await AuthService.SignupAsync(_signupModel);

        if (response.Succeeded)
        {
            NavigationManager.NavigateTo("/login", true);
        }
        else
        {
            Snackbar.Add("Something went wrong", Severity.Error);
        }
    }
}