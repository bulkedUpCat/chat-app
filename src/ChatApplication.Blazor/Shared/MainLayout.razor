@using ChatApplication.Blazor.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.IdentityModel.JsonWebTokens
@inherits LayoutComponentBase

@inject ChatAuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime JsRuntime

<MudLayout>
    <MudAppBar Elevation="3">
        @if (_authenticated)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleSidebar"/>
        }
        <MudSpacer/>
        @if (!_authenticated)
        {
            <a class="link" href="/login">Log in</a>
            <a class="link" href="/signup">Sign up</a>
        }
        else
        {
            <a class="link" href="/logout">Log out</a>
        }
        @if (_isLightMode)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="ToggleTheme"/>
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.Brightness5" Color="Color.Inherit" OnClick="ToggleTheme"/>
        }
    </MudAppBar>
    @if (_authenticated)
    {
        <MudDrawer @bind-Open="_sidebarOpen" Elevation="1">
            <MudDrawerHeader>
                <MudText Style="font-size: 1.5rem">@_userEmail</MudText>
            </MudDrawerHeader>
            <NavMenu/>
        </MudDrawer>
    }
    
    <MudMainContent Class="pt-16 px-16">
        <MudContainer Class="mt-6">
            <CascadingValue Value="HubConnection">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudThemeProvider Theme="_currentTheme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@code {
    private bool _isLightMode = true;
    private bool _sidebarOpen;
    private string _userEmail;
    private HubConnection HubConnection { get; set; }

    private MudTheme _currentTheme = new()
    {
        Typography = new Typography
        {
            Default = new Default
            {
                FontSize = "1.5rem"
            }
        }
    };
    
    private bool _authenticated;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity != null)
            {
                _userEmail = authState.User.Claims.FirstOrDefault(c => c.Type == JwtRegisteredClaimNames.Email)?.Value;
                _authenticated = authState.User.Identity.IsAuthenticated;
            }
            
            StateHasChanged();
        }
    }
    
    private void ToggleTheme()
    {
        _isLightMode = !_isLightMode;
        if(!_isLightMode)
        {
            _currentTheme = GenerateDarkTheme();
        }
        else
        {
            _currentTheme = new MudTheme
            {
                Typography = new Typography
                {
                    Default = new Default
                    {
                        FontSize = "1.5rem"
                    }
                }
            };
        }
    }

    private void ToggleSidebar()
    {
        _sidebarOpen = !_sidebarOpen;
    }
    
    private MudTheme GenerateDarkTheme() =>
        new()
        {
            Palette = new Palette
            {
                Black = "#27272f",
                Background = "#32333d",
                BackgroundGrey = "#27272f",
                Surface = "#373740",
                TextPrimary = "#ffffffb3",
                TextSecondary = "rgba(255,255,255, 0.50)",
                AppbarBackground = "#27272f",
                AppbarText = "#ffffffb3"
            },
            Typography = new Typography
            {
                Default = new Default
                {
                    FontSize = "1.5rem"
                }
            }
        };

    protected override async Task OnInitializedAsync()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl($"{Configuration.GetSection("APIUrl").Value}chathub")
            .Build();
        
        await HubConnection.StartAsync();
    }
}