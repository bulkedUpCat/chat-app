trigger:
- main

pool:
  name: WindowsAgentPool
  vmImage: winagent

variables: 
  resourceGroupName: 'chatapp-rg-182'
  subscription: 'Default Service Connection'
  location: 'eastus'
  templateFile: 'main.bicep'
  sqlServerName: 'chatappsqlservernew'
  sqlServerDatabaseName: 'chatappsqlserverdatabasenew'
  apiAppServiceName: 'chatapiappservicenew'
  blazorAppServiceName: 'chatblazorappservicenew'
  storageAccountName: 'chatappstorageaccnew'
  initialCatalog: 'chatdb'
  keyVaultName: 'chatkeyvault18new'

stages:
- stage: Provision
  jobs: 
  - job: Provision_Resources
    steps:
    - task: AzureCLI@2
      displayName: Creating Resource Group
      inputs:
        azureSubscription: $(subscription)
        scriptType: 'ps'
        scriptLocation: inlineScript
        useGlobalConfig: true
        inlineScript: |
          az group create --name $(resourceGroupName) --location $(location)

    - task: AzureCLI@2
      displayName: Creating resources defined in main.bicep
      env:
        SQL_LOGIN: $(db_login)
        SQL_PASSWORD: $(db_password)
      inputs:
        azureSubscription: $(subscription)
        scriptType: 'ps'
        scriptLocation: inlineScript
        useGlobalConfig: true
        inlineScript: |
          az deployment group create `
          --resource-group $(resourceGroupName) `
          --template-file $(templateFile) `
          --parameters `
            location=$(location) `
            dbLogin=$env:SQL_LOGIN `
            dbPassword=$env:SQL_PASSWORD `
            sqlServerName=$(sqlServerName) `
            sqlServerDatabaseName=$(sqlServerDatabaseName) `
            apiAppServiceName=$(apiAppServiceName) `
            blazorAppServiceName=$(blazorAppServiceName) `
            keyVaultName=$(keyVaultName) `
            initialCatalog=$(initialCatalog) `
            storageAccountName=$(storageAccountName)

- stage: Build
  jobs:
  - job: Build_API
    steps:
    - script: dotnet build ChatApplication.API
      displayName: Building API Project
      workingDirectory: $(solutionDir)

    - script: dotnet publish ChatApplication.API -o $(build.artifactStagingDirectory)/api
      displayName: Publishing API project build to the artifact
      workingDirectory: $(solutionDir)

    - task: PublishPipelineArtifact@1
      displayName: Publishing the API build artifact to the pipeline
      inputs:
        targetPath: '$(build.artifactStagingDirectory)/api'
        artifact: api
        publishLocation: 'pipeline'

  - job: Build_Blazor
    steps:
    - script: dotnet build ChatApplication.Blazor
      displayName: Building Blazor Project
      workingDirectory: $(solutionDir)
    
    - script: dotnet publish ChatApplication.Blazor -o $(build.artifactStagingDirectory)/blazor
      displayName: Publishing Blazor project build to the artifact
      workingDirectory: $(solutionDir)
    
    - task: PublishPipelineArtifact@1
      displayName: Publishing the Blazor build artifact to the pipeline
      inputs:
        targetPath: '$(build.artifactStagingDirectory)/blazor'
        artifact: blazor
        publishLocation: 'pipeline'
  
  - job: Build_Database
    steps:
    - task: MSBuild@1
      displayName: Building Database Project
      inputs:
        solution: '**/*.sqlproj'
    
    - task: CopyFiles@2
      displayName: Copying dacpac files
      inputs:
        Contents: '**/*.dacpac'
        TargetFolder: '$(build.artifactStagingDirectory)/dacpac'
        flattenFolders: true
        
    - task: PublishPipelineArtifact@1
      displayName: Publishing the database build artifact to the pipeline
      inputs:
        targetPath: '$(build.artifactStagingDirectory)/dacpac'
        artifact: dacpac
        publishLocation: 'pipeline'

- stage: Test
  jobs:
   - job: Test
     steps:
     - task: DotNetCoreCLI@2 
       displayName: Running Tests 
       inputs: 
         command: test 
         workingDirectory: $(solutionDir) 

- stage: Deploy
  jobs:
   - job: Deploy_Database
     steps:
     - task: DownloadPipelineArtifact@2
       inputs:
         buildType: 'current'
         artifactName: 'dacpac'
         targetPath: '$(Pipeline.Workspace)/dacpac'

     - task: SqlAzureDacpacDeployment@1
       displayName: Publishing Database project to SQL Database
       env:
        SQL_LOGIN: $(db_login)
        SQL_PASSWORD: $(db_password)
       inputs:
         azureSubscription: $(subscription)
         AuthenticationType: 'server'
         ServerName: '$(sqlServerName).database.windows.net'
         DatabaseName: '$(sqlServerDatabaseName)'
         SqlUsername: Kostia18
         SqlPassword: $env:SQL_PASSWORD
         deployType: 'DacpacTask'
         DeploymentAction: 'Publish'
         DacpacFile: '$(Pipeline.Workspace)/dacpac/*.dacpac'
         IpDetectionMethod: 'AutoDetect'

   - job: Deploy_API
     steps:
     - task: DownloadPipelineArtifact@2
       inputs:
         buildType: 'current'
         artifactName: 'api'
         targetPath: '$(Pipeline.Workspace)/api'

     - task: ArchiveFiles@2
       inputs:
         rootFolderOrFile: '$(Pipeline.Workspace)/api/'
         includeRootFolder: false
         archiveType: 'zip'
         archiveFile: '$(Pipeline.Workspace)/PublishedApi.zip'
         replaceExistingArchive: true

     - task: AzureWebApp@1
       displayName: Publishing API project to App Service
       inputs:
        azureSubscription: $(subscription)
        appType: 'webApp'
        appName: '$(apiAppServiceName)'
        package: '$(Pipeline.Workspace)/PublishedApi.zip'
        deploymentMethod: 'auto'
      
   - job: Deploy_Blazor
     steps:
     - task: DownloadPipelineArtifact@2
       inputs:
         buildType: 'current'
         artifactName: 'blazor'
         targetPath: '$(Pipeline.Workspace)/blazor'

     - task: ArchiveFiles@2
       inputs:
         rootFolderOrFile: '$(Pipeline.Workspace)/blazor/'
         includeRootFolder: false
         archiveType: 'zip'
         archiveFile: '$(Pipeline.Workspace)/PublishedBlazor.zip'
         replaceExistingArchive: true
      
     - task: AzureWebApp@1
       displayName: Publishing Blazor project to App Service
       inputs:
        azureSubscription: $(subscription)
        appType: 'webApp'
        appName: '$(blazorAppServiceName)'
        package: '$(Pipeline.Workspace)/PublishedBlazor.zip'
        deploymentMethod: 'auto'